generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum PackageOption {
  FullStack
  Backend
  Frontend
  UI
  UX
}

// Models
model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  image         String?
  phone         String?
  streetAddress String?
  postalCode    String?
  role          UserRole       @default(USER)
  city          String?
  country       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orders        Order[]
  accounts      Account[]
  sessions      Session[]

  @@index([email])
}

model Order {
  id            String         @id @default(uuid())
  paid          Boolean        @default(false)
  subTotal      Float
  deliveryFee   Float
  totalPrice    Float
  userEmail     String
  phone         String
  streetAddress String
  postalCode    String
  city          String
  country       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  products      OrderProduct[]

  @@index([userId])
}

model OrderProduct {
  id        String  @id @default(uuid())
  quantity  Int
  productId String
  orderId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([productId, orderId])
}

model Category {
  id      String    @id @default(uuid())
  name    String
  order   Int       @default(autoincrement())
  products Product[]
  @@index([name])
}

model Product {
  id                   String                 @id @default(uuid())
  name                 String
  description          String
  image                String
  order                Int                    @default(autoincrement())
  liveDemoLink         String?
  gitHubLink           String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  categoryId           String
  category             Category               @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  ProductAddon         ProductAddon[]
  ProductTech          ProductTech[]
  orders               OrderProduct[]
  downloadVerifications DownloadVerification[]

  @@index([categoryId])
}

model ProductTech {
  id        String  @id @default(uuid())
  name      String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductAddon {
  id        String        @id @default(cuid())
  name      PackageOption
  productId String
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model DownloadVerification {
  id        String   @id @default(uuid())
  identifier String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId, token])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ContactSubmission {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model Project {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  image       String
  tags        String[]
  demoUrl     String?
  githubUrl   String?
  featured    Boolean  @default(false)
  category    String
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VerificationRequest {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@index([identifier])
} 